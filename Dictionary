
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: WordListScreen(),
    );
  }
}

class WordListScreen extends StatefulWidget {
  @override
  _WordListScreenState createState() => _WordListScreenState();
}

class _WordListScreenState extends State<WordListScreen> {
  List<String> words = [];

  @override
  void initState() {
    super.initState();
    _loadWords();
  }

  Future<void> _loadWords() async {
    try {
      WidgetsFlutterBinding
          .ensureInitialized(); // Важно: Инициализация плагинов
      // Остальной код
    } catch (e) {
      print('Error loading words: $e');
    }
  }

  Future<void> _saveWords() async {
    try {
      String content = json.encode(words);
      await _writeDicFile(content);
      print('Words successfully saved.');
    } catch (e) {
      print('Error saving words: $e');
    }
  }

  Future<String> _readDicFile() async {
    File file = File('dic.dart');
    if (file.existsSync()) {
      return file.readAsString();
    } else {
      return '[]';
    }
  }

  Future<void> _writeDicFile(String content) async {
    File file = File('dic.dart');
    await file.writeAsString(content);
  }

  void _addWord(String word) {
    setState(() {
      words.add(word);
      _saveWords();
    });
  }

  void _duplicateWord(int index) {
    setState(() {
      words.insert(index + 1, words[index]);
      _saveWords();
    });
  }

  void _editWord(int index) async {
    String editedWord = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => EditWordScreen(word: words[index]),
      ),
    );

    setState(() {
      words[index] = editedWord;
      _saveWords();
    });
  }

  void _deleteWord(int index) {
    setState(() {
      words.removeAt(index);
      _saveWords();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Список слов')),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    decoration: InputDecoration(labelText: 'Добавить слово'),
                    onSubmitted: (value) {
                      _addWord(value);
                    },
                  ),
                ),
                SizedBox(width: 16),
                ElevatedButton(
                  onPressed: () {
                    _addWord('Новое слово');
                  },
                  child: Text('Добавить'),
                ),
              ],
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: words.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(
                    words[index],
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  leading: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        onPressed: () {
                          _duplicateWord(index);
                        },
                        icon: Icon(Icons.content_copy),
                      ),
                      IconButton(
                        onPressed: () {
                          _editWord(index);
                        },
                        icon: Icon(Icons.edit),
                      ),
                      IconButton(
                        onPressed: () {
                          _deleteWord(index);
                        },
                        icon: Icon(Icons.delete),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class EditWordScreen extends StatefulWidget {
  final String word;

  EditWordScreen({required this.word});

  @override
  _EditWordScreenState createState() => _EditWordScreenState();
}

class _EditWordScreenState extends State<EditWordScreen> {
  late TextEditingController _controller;

  @override
  void initState() {
    super.initState();
    _controller = TextEditingController(text: widget.word);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Изменить слово')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(labelText: 'Редактировать слово'),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context, _controller.text);
              },
              child: Text('Сохранить'),
            ),
          ],
        ),
      ),
    );
  }
}
